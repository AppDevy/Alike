// Generated by CoffeeScript 1.4.0
(function() {
  var distance, stdv;

  module.exports = function(subject, objects, options) {
    var attr, distances, i, k, o, object, sortMap, sortedObjects, _i, _len;
    if (arguments.length < 2) {
      throw new Error('Expecting at least 2 arguments');
    }
    if (!(Array.prototype.slice.call(arguments).every(function(i) {
      return i && typeof i === 'object';
    }))) {
      throw new Error('Expecting object arguments');
    }
    if (!Array.isArray(arguments[1])) {
      throw new Error('Expecting an array as second argument');
    }
    if (!objects.length) {
      return [];
    }
    for (attr in subject) {
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        o = objects[_i];
        if (!(attr in o)) {
          throw new Error("Missing attribute '" + attr + "' in '" + (JSON.stringify(o)) + "'");
        }
      }
    }
    distances = (function() {
      var _j, _len1, _results;
      _results = [];
      for (i = _j = 0, _len1 = objects.length; _j < _len1; i = ++_j) {
        object = objects[i];
        _results.push({
          index: i,
          dist: distance(subject, object)
        });
      }
      return _results;
    })();
    sortMap = distances.sort(function(a, b) {
      return a.dist - b.dist;
    });
    sortedObjects = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = sortMap.length; _j < _len1; _j++) {
        i = sortMap[_j];
        _results.push(objects[i.index]);
      }
      return _results;
    })();
    k = (options != null ? options.k : void 0) || 1;
    return sortedObjects.slice(0, k);
  };

  /* 
    Euclidean distance function
    ----------
    Takes 2 objects, and returns squared Euclidean distance based on the first object's attributes
    e.g. p1 = {a: 1} and p2 = {a: 2, b: 3, c: 5} will ignore extra attributes on p2 and return 1
    All attributes on p1 MUST be present in p2 (otherwise will be inaccurate if ignored)
  */


  distance = function(p1, p2) {
    var attr, dist, val;
    dist = 0;
    for (attr in p1) {
      val = p1[attr];
      dist += Math.pow(val - p2[attr], 2);
    }
    return dist;
  };

  /*
    Standard Deviation
  */


  stdv = function(array) {
    var mean, ssqdiff, sum, x, _i, _len;
    sum = array.reduce(function(a, b) {
      return a + b;
    });
    mean = sum / array.length;
    ssqdiff = 0;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      x = array[_i];
      ssqdiff += Math.pow(x - mean, 2);
    }
    return Math.sqrt(ssqdiff / array.length);
  };

}).call(this);
