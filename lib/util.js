// Generated by CoffeeScript 1.4.0

/* 
  Euclidean distance function
  ----------
  Takes 2 objects, and returns squared Euclidean distance based on the first object's attributes
  e.g. p1 = {a: 1} and p2 = {a: 2, b: 3, c: 5} will ignore extra attributes on p2 and return 1
  All attributes on p1 MUST be present in p2 (otherwise will be inaccurate if ignored)
*/


(function() {
  var mean;

  exports.distance = function(p1, p2) {
    var attr, dist, val;
    dist = 0;
    for (attr in p1) {
      val = p1[attr];
      dist += Math.pow(val - p2[attr], 2);
    }
    return dist;
  };

  /*
    Standard Deviation
  */


  exports.stdv = function(array) {
    var m, ssqdiff, x, _i, _len;
    m = mean(array);
    ssqdiff = 0;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      x = array[_i];
      ssqdiff += Math.pow(x - m, 2);
    }
    return Math.sqrt(ssqdiff / array.length);
  };

  /*
    Standardize objects
    ---
    Takes an array of objects with numerical attributes, and returns object with standardized values,
    with units in measures of standard deviation from mean. (See www.econ.upf.edu/~michael/stanford/maeb4.pdf)
  */


  exports.standardize = function(array) {
    var m, s, x, _i, _len, _results;
    m = mean(array);
    s = exports.stdv(array);
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      x = array[_i];
      _results.push((x - m) / s);
    }
    return _results;
  };

  mean = function(array) {
    var sum;
    sum = array.reduce(function(a, b) {
      return a + b;
    });
    return sum / array.length;
  };

}).call(this);
