// Generated by CoffeeScript 1.4.0
(function() {
  var nearestNeighbor, should;

  should = require('should');

  nearestNeighbor = require('../lib/main');

  describe('K Nearest Neighbor', function() {
    describe('arguments', function() {
      it('should be at least 2', function() {
        (function() {
          return nearestNeighbor();
        }).should.throwError('Expecting at least 2 arguments');
        return (function() {
          return nearestNeighbor(1);
        }).should.throwError('Expecting at least 2 arguments');
      });
      it('should accept 2 or 3', function() {
        (function() {
          return nearestNeighbor({
            a: 1
          }, [
            {
              a: 2
            }
          ]);
        }).should.not.throwError();
        return (function() {
          return nearestNeighbor({
            a: 1
          }, [
            {
              a: 2
            }, {
              b: 3
            }
          ], {
            option: false
          });
        }).should.not.throwError();
      });
      it('should accept objects only', function() {
        return (function() {
          return nearestNeighbor(1, 2);
        }).should.throwError('Expecting object arguments');
      });
      it('should not accept null as objects', function() {
        return (function() {
          return nearestNeighbor(null, null);
        }).should.throwError('Expecting object arguments');
      });
      return it('should only accept array as second argument', function() {
        return (function() {
          return nearestNeighbor({
            a: 1
          }, {
            a: 2
          });
        }).should.throwError('Expecting an array as second argument');
      });
    });
    describe('with K=1', function() {
      it('should return the nearest neighbor with fixed dimensionality');
      it('should return the nearest neighbor with variable dimensionality');
      return it('should return an empty object/array if no Y');
    });
    return describe('with K=5', function() {
      it('should return 5 nearest neighbors with fixed dimensionality');
      it('should return 5 nearest neighbor with variable dimensionality');
      return it('should return all of Y sorted by distance if Y.length < 5');
    });
  });

}).call(this);
