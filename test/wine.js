// Generated by CoffeeScript 1.4.0
(function() {
  var nearestNeighbor, should;

  should = require('should');

  nearestNeighbor = require('../lib/main');

  describe('K Nearest Neighbor', function() {
    var getLabels;
    getLabels = function(results) {
      return results.map(function(r) {
        return r.label;
      });
    };
    describe('with basic wine testCase', function() {
      var options, profile1, profile2, profile3, testCase, wineList;
      testCase = require('./test_case_simple');
      wineList = testCase.wineList;
      profile1 = testCase.tasteProfile1;
      profile2 = testCase.tasteProfile2;
      profile3 = testCase.tasteProfile3;
      options = {
        k: 3
      };
      it('should return the nearest neighbor', function() {
        nearestNeighbor(profile1, wineList)[0].label.should.eql('C');
        nearestNeighbor(profile2, wineList)[0].label.should.eql('E');
        return nearestNeighbor(profile3, wineList)[0].label.should.eql('J');
      });
      it('should return 3 nearest neighbors, sorted by distance', function() {
        getLabels(nearestNeighbor(profile1, wineList, options)).should.eql(['C', 'H', 'A']);
        getLabels(nearestNeighbor(profile2, wineList, options)).should.eql(['E', 'F', 'A']);
        return getLabels(nearestNeighbor(profile3, wineList, options)).should.eql(['J', 'L', 'G']);
      });
      return it('should return all of Y sorted by distance if Y.length < 3', function() {
        getLabels(nearestNeighbor(profile1, wineList.slice(0, 2), options)).should.eql(['A', 'B']);
        getLabels(nearestNeighbor(profile2, wineList.slice(0, 2), options)).should.eql(['A', 'B']);
        return getLabels(nearestNeighbor(profile3, wineList.slice(0, 2), options)).should.eql(['B', 'A']);
      });
    });
    return describe('with testCase that requires standardized Euclidean distance', function() {
      var options, profile1, profile2, profile3, testCase, wineList;
      testCase = require('./test_case_standardize');
      wineList = testCase.wineList;
      profile1 = testCase.tasteProfile1;
      profile2 = testCase.tasteProfile2;
      profile3 = testCase.tasteProfile3;
      options = {
        k: 3,
        standardize: true
      };
      it('should return the nearest neighbor', function() {
        nearestNeighbor(profile1, wineList, options)[0].label.should.eql('C');
        nearestNeighbor(profile2, wineList, options)[0].label.should.eql('E');
        return nearestNeighbor(profile3, wineList, options)[0].label.should.eql('J');
      });
      it('should return 3 nearest neighbors, sorted by distance', function() {
        getLabels(nearestNeighbor(profile1, wineList, options)).should.eql(['C', 'H', 'A']);
        getLabels(nearestNeighbor(profile2, wineList, options)).should.eql(['E', 'F', 'A']);
        return getLabels(nearestNeighbor(profile3, wineList, options)).should.eql(['J', 'L', 'G']);
      });
      return describe.skip('and weights per attribute', function() {
        return it('should minimize category with 0.01 weight', function() {
          options = {
            k: 3,
            standardize: true,
            weights: {
              category: 0.01,
              angularity: 0.99
            }
          };
          getLabels(nearestNeighbor(profile1, wineList, options)).should.eql(['K', 'C', 'H']);
          getLabels(nearestNeighbor(profile2, wineList, options)).should.eql(['E', 'A', 'I']);
          return getLabels(nearestNeighbor(profile3, wineList, options)).should.eql(['B', 'J', 'L']);
        });
      });
    });
  });

}).call(this);
